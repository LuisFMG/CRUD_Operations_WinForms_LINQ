#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUD_Operations.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Operaciones_CRUD_Empleados")]
	public partial class DB_CRUD_EmployeesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DB_CRUD_EmployeesDataContext() : 
				base(global::CRUD_Operations.Data.Properties.Settings.Default.Operaciones_CRUD_EmpleadosConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB_CRUD_EmployeesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_CRUD_EmployeesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_CRUD_EmployeesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_CRUD_EmployeesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Employee;
		
		private System.DateTime _Date_Of_Hire;
		
		private System.Data.Linq.Binary _Photo_Employee;
		
		private string _Employee_Name;
		
		private string _Employee_Family_Name;
		
		private System.DateTime _Date_Of_Birth;
		
		private int _Age;
		
		private string _Email;
		
		private int _Id_User;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_EmployeeChanging(int value);
    partial void OnId_EmployeeChanged();
    partial void OnDate_Of_HireChanging(System.DateTime value);
    partial void OnDate_Of_HireChanged();
    partial void OnPhoto_EmployeeChanging(System.Data.Linq.Binary value);
    partial void OnPhoto_EmployeeChanged();
    partial void OnEmployee_NameChanging(string value);
    partial void OnEmployee_NameChanged();
    partial void OnEmployee_Family_NameChanging(string value);
    partial void OnEmployee_Family_NameChanged();
    partial void OnDate_Of_BirthChanging(System.DateTime value);
    partial void OnDate_Of_BirthChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnId_UserChanging(int value);
    partial void OnId_UserChanged();
    #endregion
		
		public Employee()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Id Employee]", Storage="_Id_Employee", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_Employee
		{
			get
			{
				return this._Id_Employee;
			}
			set
			{
				if ((this._Id_Employee != value))
				{
					this.OnId_EmployeeChanging(value);
					this.SendPropertyChanging();
					this._Id_Employee = value;
					this.SendPropertyChanged("Id_Employee");
					this.OnId_EmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Of Hire]", Storage="_Date_Of_Hire", DbType="Date NOT NULL")]
		public System.DateTime Date_Of_Hire
		{
			get
			{
				return this._Date_Of_Hire;
			}
			set
			{
				if ((this._Date_Of_Hire != value))
				{
					this.OnDate_Of_HireChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Hire = value;
					this.SendPropertyChanged("Date_Of_Hire");
					this.OnDate_Of_HireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Photo Employee]", Storage="_Photo_Employee", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo_Employee
		{
			get
			{
				return this._Photo_Employee;
			}
			set
			{
				if ((this._Photo_Employee != value))
				{
					this.OnPhoto_EmployeeChanging(value);
					this.SendPropertyChanging();
					this._Photo_Employee = value;
					this.SendPropertyChanged("Photo_Employee");
					this.OnPhoto_EmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Employee Name]", Storage="_Employee_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Employee_Name
		{
			get
			{
				return this._Employee_Name;
			}
			set
			{
				if ((this._Employee_Name != value))
				{
					this.OnEmployee_NameChanging(value);
					this.SendPropertyChanging();
					this._Employee_Name = value;
					this.SendPropertyChanged("Employee_Name");
					this.OnEmployee_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Employee Family Name]", Storage="_Employee_Family_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Employee_Family_Name
		{
			get
			{
				return this._Employee_Family_Name;
			}
			set
			{
				if ((this._Employee_Family_Name != value))
				{
					this.OnEmployee_Family_NameChanging(value);
					this.SendPropertyChanging();
					this._Employee_Family_Name = value;
					this.SendPropertyChanged("Employee_Family_Name");
					this.OnEmployee_Family_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Of Birth]", Storage="_Date_Of_Birth", DbType="Date NOT NULL")]
		public System.DateTime Date_Of_Birth
		{
			get
			{
				return this._Date_Of_Birth;
			}
			set
			{
				if ((this._Date_Of_Birth != value))
				{
					this.OnDate_Of_BirthChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Birth = value;
					this.SendPropertyChanged("Date_Of_Birth");
					this.OnDate_Of_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Id User]", Storage="_Id_User", DbType="Int NOT NULL")]
		public int Id_User
		{
			get
			{
				return this._Id_User;
			}
			set
			{
				if ((this._Id_User != value))
				{
					this.OnId_UserChanging(value);
					this.SendPropertyChanging();
					this._Id_User = value;
					this.SendPropertyChanged("Id_User");
					this.OnId_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Employee", Storage="_User", ThisKey="Id_User", OtherKey="Id_User", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._Id_User = value.Id_User;
					}
					else
					{
						this._Id_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_User;
		
		private string _Username;
		
		private string _User_Password;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_UserChanging(int value);
    partial void OnId_UserChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    #endregion
		
		public User()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Id User]", Storage="_Id_User", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_User
		{
			get
			{
				return this._Id_User;
			}
			set
			{
				if ((this._Id_User != value))
				{
					this.OnId_UserChanging(value);
					this.SendPropertyChanging();
					this._Id_User = value;
					this.SendPropertyChanged("Id_User");
					this.OnId_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User Password]", Storage="_User_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Employee", Storage="_Employees", ThisKey="Id_User", OtherKey="Id_User")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591